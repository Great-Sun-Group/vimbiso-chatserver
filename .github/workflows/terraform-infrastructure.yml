name: Deploy Infrastructure

on:
  workflow_dispatch:

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/dev' || contains(github.ref, 'infra')
    environment: ${{ (github.ref == 'refs/heads/prod' && 'production') || 'development' }}
    timeout-minutes: 30

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || 'development' }}
      DOMAIN: ${{ github.ref == 'refs/heads/prod' && 'vimbiso-chatserver.vimbisopay.africa' || 'dev-vimbiso-chatserver.dailycredcoin.com' }}
      # Common Terraform variables
      TF_VAR_environment: ${{ github.ref == 'refs/heads/prod' && 'production' || 'development' }}
      TF_VAR_domain: ${{ github.ref == 'refs/heads/prod' && 'vimbiso-chatserver.vimbisopay.africa' || 'dev-vimbiso-chatserver.dailycredcoin.com' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform Backend
        id: init-backend
        run: |
          echo "Current environment: ${ENVIRONMENT}"
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="vimbiso-pay-terraform-state-${ENVIRONMENT}-${AWS_ACCOUNT_ID}"
          TABLE_NAME="vimbiso-pay-terraform-state-lock-${ENVIRONMENT}-${AWS_ACCOUNT_ID}"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --create-bucket-configuration LocationConstraint=af-south-1
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          fi

          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1; then
            aws dynamodb create-table --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --tags Key=Environment,Value=${ENVIRONMENT} Key=ManagedBy,Value=terraform
          fi

          cd terraform
          terraform init \
            -backend-config="bucket=${BUCKET_NAME}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=af-south-1" \
            -backend-config="dynamodb_table=${TABLE_NAME}"

      - name: Clear Stale Locks
        env:
          DYNAMODB_TABLE: ${{ steps.init-backend.outputs.dynamodb_table }}
        run: |
          cd terraform
          LOCKS_JSON=$(aws dynamodb scan --table-name "$DYNAMODB_TABLE" --output json)
          if [ ! -z "$LOCKS_JSON" ] && [ "$LOCKS_JSON" != "null" ]; then
            echo "$LOCKS_JSON" | jq -r '.Items[] | select(.LockID != null) | .LockID.S' | while read -r LOCK_ID; do
              if [ ! -z "$LOCK_ID" ]; then
                aws dynamodb delete-item \
                  --table-name "$DYNAMODB_TABLE" \
                  --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" \
                  --return-values ALL_OLD
              fi
            done
          fi

      - name: Plan Infrastructure Changes
        id: plan
        run: |
          cd terraform
          terraform plan -input=false -lock-timeout=20m -out=plan.tfplan

          # Store plan summary
          echo "PLAN_SUMMARY<<EOF" >> $GITHUB_ENV
          terraform show -no-color plan.tfplan | grep -A 2 "Plan:" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Deploy Infrastructure
        run: |
          cd terraform
          terraform apply -input=false -lock-timeout=20m plan.tfplan

      - name: Output DNS Information
        run: |
          cd terraform
          echo "Infrastructure Deployment Complete!"
          echo "==============================="
          echo "Plan Summary:"
          echo "$PLAN_SUMMARY"
          echo ""
          echo "Domain: $DOMAIN"
          echo ""
          echo "Configure your domain with these nameservers:"
          echo "----------------------------------------"
          terraform output -json route53_nameservers | jq -r '.[]' | sed 's/^/- /'
          echo ""
          echo "Other Information:"
          echo "----------------"
          echo "ALB DNS: $(terraform output -raw alb_dns_name)"
          echo "ECS Cluster: $(terraform output -raw ecs_cluster_name)"

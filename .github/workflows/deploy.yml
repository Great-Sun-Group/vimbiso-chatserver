name: Deploy VimbisoPay

on:
  push:
    branches:
      - stage
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/stage'
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || 'staging' }}
    timeout-minutes: 30

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || 'staging' }}
      BUILD_TARGET: production
      DOMAIN: ${{ github.ref == 'refs/heads/prod' && 'whatsapp.vimbisopay.africa' || 'stage.whatsapp.vimbisopay.africa' }}
      # Common Terraform variables
      TF_VAR_environment: ${{ github.ref == 'refs/heads/prod' && 'production' || 'staging' }}
      TF_VAR_docker_image: "dummy-image:latest"
      TF_VAR_django_secret: "dummy-secret"
      TF_VAR_mycredex_app_url: "https://dummy-url"
      TF_VAR_client_api_key: "dummy-key"
      TF_VAR_whatsapp_api_url: "https://dummy-url"
      TF_VAR_whatsapp_access_token: "dummy-token"
      TF_VAR_whatsapp_phone_number_id: "dummy-id"
      TF_VAR_whatsapp_business_id: "dummy-id"
      TF_VAR_whatsapp_registration_flow_id: "dummy-id"
      TF_VAR_whatsapp_company_registration_flow_id: "dummy-id"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform Backend
        id: init-backend
        run: |
          echo "Current environment: ${ENVIRONMENT}"
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="vimbiso-pay-terraform-state-${ENVIRONMENT}-${AWS_ACCOUNT_ID}"
          TABLE_NAME="vimbiso-pay-terraform-state-lock-${ENVIRONMENT}-${AWS_ACCOUNT_ID}"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --create-bucket-configuration LocationConstraint=af-south-1
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          fi

          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1; then
            aws dynamodb create-table --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --tags Key=Environment,Value=${ENVIRONMENT} Key=ManagedBy,Value=terraform
          fi

          cd terraform
          terraform init \
            -backend-config="bucket=${BUCKET_NAME}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=af-south-1" \
            -backend-config="dynamodb_table=${TABLE_NAME}"

          echo "dynamodb_table=${TABLE_NAME}" >> $GITHUB_OUTPUT

      - name: Clear Stale Locks
        env:
          DYNAMODB_TABLE: ${{ steps.init-backend.outputs.dynamodb_table }}
        run: |
          cd terraform
          LOCKS_JSON=$(aws dynamodb scan --table-name "$DYNAMODB_TABLE" --output json)
          if [ ! -z "$LOCKS_JSON" ] && [ "$LOCKS_JSON" != "null" ]; then
            echo "$LOCKS_JSON" | jq -r '.Items[] | select(.LockID != null) | .LockID.S' | while read -r LOCK_ID; do
              if [ ! -z "$LOCK_ID" ]; then
                aws dynamodb delete-item \
                  --table-name "$DYNAMODB_TABLE" \
                  --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" \
                  --return-values ALL_OLD
              fi
            done
          fi

      - name: Deploy Base Infrastructure
        run: |
          cd terraform
          # Deploy networking and initial Route53 setup
          terraform plan -input=false -lock-timeout=20m \
            -target=module.networking \
            -target=module.route53_cert \
            -out=phase1.tfplan

          terraform apply -input=false -lock-timeout=20m phase1.tfplan

          # Display NS records for reference
          echo "NS records for ${DOMAIN}:"
          terraform output -json route53_nameservers | jq -r '.[]' | sed 's/^/- /'

      - name: Deploy Core Infrastructure
        run: |
          cd terraform
          # Deploy load balancer, route53 DNS records, IAM, and ECR
          terraform plan -input=false -lock-timeout=20m \
            -target=module.loadbalancer \
            -target=module.route53_dns \
            -target=module.iam \
            -target=module.ecr \
            -out=phase2.tfplan

          terraform apply -input=false -lock-timeout=20m phase2.tfplan

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vimbiso-pay-${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --no-cache --target $BUILD_TARGET \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy Application
        env:
          TF_VAR_docker_image: ${{ env.IMAGE }}
          TF_VAR_django_secret: ${{ secrets.DJANGO_SECRET }}
          TF_VAR_mycredex_app_url: ${{ secrets.MYCREDEX_APP_URL }}
          TF_VAR_client_api_key: ${{ secrets.CLIENT_API_KEY }}
          TF_VAR_whatsapp_api_url: ${{ secrets.WHATSAPP_API_URL }}
          TF_VAR_whatsapp_access_token: ${{ secrets.WHATSAPP_ACCESS_TOKEN }}
          TF_VAR_whatsapp_phone_number_id: ${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
          TF_VAR_whatsapp_business_id: ${{ secrets.WHATSAPP_BUSINESS_ID }}
          TF_VAR_whatsapp_registration_flow_id: ${{ secrets.WHATSAPP_REGISTRATION_FLOW_ID }}
          TF_VAR_whatsapp_company_registration_flow_id: ${{ secrets.WHATSAPP_COMPANY_REGISTRATION_FLOW_ID }}
        run: |
          cd terraform
          # Deploy EFS and ECS
          terraform plan -input=false -lock-timeout=20m \
            -target=module.efs \
            -target=module.ecs \
            -out=phase3.tfplan

          terraform apply -input=false -lock-timeout=20m phase3.tfplan

      - name: Wait for Deployment
        run: |
          echo "Waiting for deployment to complete..."
          MAX_ATTEMPTS=40
          ATTEMPTS=0
          DEPLOYMENT_DONE=false

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            SERVICE_JSON=$(aws ecs describe-services \
              --cluster "vimbiso-pay-cluster-$ENVIRONMENT" \
              --service "vimbiso-pay-service-$ENVIRONMENT" \
              --query 'services[0]')

            PRIMARY_DEPLOYMENT=$(echo $SERVICE_JSON | jq -r '.deployments[] | select(.status == "PRIMARY")')
            RUNNING_COUNT=$(echo $PRIMARY_DEPLOYMENT | jq -r '.runningCount')
            DESIRED_COUNT=$(echo $PRIMARY_DEPLOYMENT | jq -r '.desiredCount')
            FAILED_TASKS=$(echo $PRIMARY_DEPLOYMENT | jq -r '.failedTasks')
            PENDING_COUNT=$(echo $PRIMARY_DEPLOYMENT | jq -r '.pendingCount')

            if [ "$FAILED_TASKS" -gt 0 ]; then
              echo "Failed tasks detected. Fetching logs..."
              TASKS=$(aws ecs list-tasks \
                --cluster "vimbiso-pay-cluster-$ENVIRONMENT" \
                --service-name "vimbiso-pay-service-$ENVIRONMENT" \
                --desired-status STOPPED \
                --query 'taskArns[]' \
                --output text)

              if [ ! -z "$TASKS" ]; then
                echo "$TASKS" | tr ' ' '\n' | while read -r TASK; do
                  if [ ! -z "$TASK" ]; then
                    TASK_ID=${TASK##*/}
                    echo "Logs for task $TASK_ID:"
                    aws logs get-log-events \
                      --log-group-name "/ecs/vimbiso-pay-$ENVIRONMENT" \
                      --log-stream-name "app/$TASK_ID" \
                      --limit 100 \
                      --query 'events[].message' \
                      --output text || echo "No logs available"
                  fi
                done
              else
                echo "No stopped tasks found"
              fi
              exit 1
            fi

            if [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ] && [ "$DESIRED_COUNT" -gt 0 ] && [ "$PENDING_COUNT" = "0" ]; then
              echo "Deployment completed successfully!"
              DEPLOYMENT_DONE=true
              break
            fi

            ATTEMPTS=$((ATTEMPTS + 1))
            if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
              echo "Waiting 30 seconds... (Attempt $ATTEMPTS/$MAX_ATTEMPTS)"
              sleep 30
            fi
          done

          if [ "$DEPLOYMENT_DONE" != "true" ]; then
            echo "Deployment timeout"
            exit 1
          fi

      - name: Print Deployment Information
        run: |
          cd terraform
          echo "Deployment Summary"
          echo "=================="
          echo "Environment: $ENVIRONMENT"
          echo "Domain: $(terraform output -raw domain_name)"
          echo "ALB DNS: $(terraform output -raw alb_dns_name)"
          echo "ECS Cluster: $(terraform output -raw ecs_cluster_name)"
          echo "ECS Service: $(terraform output -raw ecs_service_name)"
          echo "NS Records:"
          terraform output -json route53_nameservers | jq -r '.[]' | sed 's/^/- /'

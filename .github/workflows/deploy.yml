name: Deploy VimbisoPay

on:
  push:
    branches:
      - stage  # Automatically trigger on push to stage branch
  workflow_dispatch:  # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/stage'
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || 'staging' }}

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || 'staging' }}
      BUILD_TARGET: production
      DOMAIN: ${{ github.ref == 'refs/heads/prod' && 'whatsapp.vimbisopay.africa' || 'whatsapp-stage.vimbisopay.africa' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Create AWS Service-Linked Roles
        run: |
          # Create ECS service-linked role if it doesn't exist
          if ! aws iam get-role --role-name "AWSServiceRoleForECS" 2>/dev/null; then
            echo "Creating ECS service-linked role..."
            aws iam create-service-linked-role --aws-service-name "ecs.amazonaws.com"
          else
            echo "ECS service-linked role already exists"
          fi

          # Create ELB service-linked role if it doesn't exist
          if ! aws iam get-role --role-name "AWSServiceRoleForElasticLoadBalancing" 2>/dev/null; then
            echo "Creating ELB service-linked role..."
            aws iam create-service-linked-role --aws-service-name "elasticloadbalancing.amazonaws.com"
          else
            echo "ELB service-linked role already exists"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup and Initialize Terraform Backend
        run: |
          echo "Current environment: ${ENVIRONMENT}"
          BUCKET_NAME="vimbiso-pay-terraform-state-${ENVIRONMENT}"
          TABLE_NAME="vimbiso-pay-terraform-state-lock-${ENVIRONMENT}"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Creating S3 bucket: $BUCKET_NAME"
            aws s3api create-bucket --bucket "$BUCKET_NAME" --create-bucket-configuration LocationConstraint=af-south-1
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          else
            echo "S3 bucket already exists: $BUCKET_NAME"
          fi

          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1; then
            echo "Creating DynamoDB table: $TABLE_NAME"
            aws dynamodb create-table --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "DynamoDB table already exists: $TABLE_NAME"
          fi

          cd terraform
          terraform init \
            -backend-config="bucket=${BUCKET_NAME}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=af-south-1" \
            -backend-config="dynamodb_table=${TABLE_NAME}"

      - name: Create Base Infrastructure
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_docker_image: "dummy-image:latest"
          TF_VAR_django_secret: ${{ secrets.DJANGO_SECRET }}
          TF_VAR_mycredex_app_url: ${{ secrets.MYCREDEX_APP_URL }}
          TF_VAR_client_api_key: ${{ secrets.CLIENT_API_KEY }}
          TF_VAR_whatsapp_api_url: ${{ secrets.WHATSAPP_API_URL }}
          TF_VAR_whatsapp_access_token: ${{ secrets.WHATSAPP_ACCESS_TOKEN }}
          TF_VAR_whatsapp_phone_number_id: ${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
          TF_VAR_whatsapp_business_id: ${{ secrets.WHATSAPP_BUSINESS_ID }}
          TF_VAR_whatsapp_registration_flow_id: ${{ secrets.WHATSAPP_REGISTRATION_FLOW_ID }}
          TF_VAR_whatsapp_company_registration_flow_id: ${{ secrets.WHATSAPP_COMPANY_REGISTRATION_FLOW_ID }}
        run: |
          cd terraform
          terraform apply -auto-approve \
            -target=aws_vpc.main \
            -target=aws_subnet.private \
            -target=aws_subnet.public \
            -target=aws_internet_gateway.main \
            -target=aws_route.internet_access \
            -target=aws_eip.nat \
            -target=aws_nat_gateway.main \
            -target=aws_route_table.private \
            -target=aws_route_table_association.private \
            -target=aws_security_group.alb \
            -target=aws_security_group.ecs_tasks \
            -target=aws_ecr_repository.app

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vimbiso-pay-${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image with target $BUILD_TARGET..."
          docker build --no-cache --target $BUILD_TARGET \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Docker image built successfully."

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy Application
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_docker_image: ${{ env.IMAGE }}
          TF_VAR_django_secret: ${{ secrets.DJANGO_SECRET }}
          TF_VAR_mycredex_app_url: ${{ secrets.MYCREDEX_APP_URL }}
          TF_VAR_client_api_key: ${{ secrets.CLIENT_API_KEY }}
          TF_VAR_whatsapp_api_url: ${{ secrets.WHATSAPP_API_URL }}
          TF_VAR_whatsapp_access_token: ${{ secrets.WHATSAPP_ACCESS_TOKEN }}
          TF_VAR_whatsapp_phone_number_id: ${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
          TF_VAR_whatsapp_business_id: ${{ secrets.WHATSAPP_BUSINESS_ID }}
          TF_VAR_whatsapp_registration_flow_id: ${{ secrets.WHATSAPP_REGISTRATION_FLOW_ID }}
          TF_VAR_whatsapp_company_registration_flow_id: ${{ secrets.WHATSAPP_COMPANY_REGISTRATION_FLOW_ID }}
        run: |
          cd terraform
          terraform plan -input=false -out=tfplan
          terraform apply -auto-approve -input=false tfplan

      - name: Wait for Deployment
        run: |
          echo "Waiting for deployment to complete..."
          MAX_ATTEMPTS=40  # 20 minutes total (30 seconds * 40)
          ATTEMPTS=0
          DEPLOYMENT_DONE=false

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            SERVICE_JSON=$(aws ecs describe-services \
              --cluster vimbiso-pay-cluster-$ENVIRONMENT \
              --services vimbiso-pay-service-$ENVIRONMENT \
              --query 'services[0]')

            PRIMARY_DEPLOYMENT=$(echo $SERVICE_JSON | jq -r '.deployments[] | select(.status == "PRIMARY")')
            RUNNING_COUNT=$(echo $PRIMARY_DEPLOYMENT | jq -r '.runningCount')
            DESIRED_COUNT=$(echo $PRIMARY_DEPLOYMENT | jq -r '.desiredCount')
            FAILED_TASKS=$(echo $PRIMARY_DEPLOYMENT | jq -r '.failedTasks')

            echo "Deployment Status:"
            echo "Running Count: $RUNNING_COUNT"
            echo "Desired Count: $DESIRED_COUNT"
            echo "Failed Tasks: $FAILED_TASKS"

            if [[ "$RUNNING_COUNT" == "$DESIRED_COUNT" && "$DESIRED_COUNT" -gt 0 ]]; then
              echo "Deployment completed successfully!"
              DEPLOYMENT_DONE=true
              break
            elif [[ "$FAILED_TASKS" -gt 0 ]]; then
              TASKS=$(aws ecs list-tasks \
                --cluster vimbiso-pay-cluster-$ENVIRONMENT \
                --service-name vimbiso-pay-service-$ENVIRONMENT \
                --desired-status STOPPED \
                --query 'taskArns[]' --output text)

              for TASK in $TASKS; do
                echo "Failed task details for $TASK:"
                aws ecs describe-tasks \
                  --cluster vimbiso-pay-cluster-$ENVIRONMENT \
                  --tasks $TASK \
                  --query 'tasks[].{reason: stoppedReason, exitCode: containers[].exitCode}'

                echo "Logs for failed task $TASK:"
                aws logs get-log-events \
                  --log-group-name "/ecs/vimbiso-pay-$ENVIRONMENT" \
                  --log-stream-name "vimbiso-pay-$ENVIRONMENT/${TASK##*/}" \
                  --limit 20 \
                  --query 'events[].message' \
                  --output text || echo "No logs available"
              done

              echo "Deployment failed due to task failures"
              exit 1
            fi

            echo "Recent Events:"
            echo $SERVICE_JSON | jq -r '.events[0:3][] | .message'

            ATTEMPTS=$((ATTEMPTS + 1))
            if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
              echo "Waiting 30 seconds before next check (Attempt $ATTEMPTS of $MAX_ATTEMPTS)..."
              sleep 30
            fi
          done

          if [ "$DEPLOYMENT_DONE" != "true" ]; then
            echo "Deployment did not complete within expected time"
            exit 1
          fi

      - name: Print Deployment Information
        run: |
          cd terraform
          echo "Deployment completed successfully."
          echo "Environment: $ENVIRONMENT"
          echo "Image: $IMAGE"
          echo "Build Target: $BUILD_TARGET"
          echo "========================================"
          echo "Infrastructure Outputs:"
          echo "========================================"
          echo "VPC ID: $(terraform output -raw vpc_id)"
          echo "Private Subnet IDs: $(terraform output -json private_subnet_ids)"
          echo "Public Subnet IDs: $(terraform output -json public_subnet_ids)"
          echo "ECR Repository URL: $(terraform output -raw ecr_repository_url)"
          echo "Domain: $(terraform output -raw domain)"
          echo "========================================"
          echo "Application Outputs:"
          echo "========================================"
          echo "ECS Cluster ARN: $(terraform output -raw ecs_cluster_arn)"
          echo "ECS Service Name: $(terraform output -raw ecs_service_name)"
          echo "ECS Task Definition ARN: $(terraform output -raw ecs_task_definition_arn)"
          echo "Auto Scaling Config: $(terraform output -json autoscaling_config)"
          echo "========================================"

services:
  app:
    build:
      context: ..
      target: development
    volumes:
      - ./data:/app/data
      - ./core:/app/core
      - ./config:/app/config
      - ./services:/app/services
      - ./manage.py:/app/manage.py
    ports:
      - "8000:8000"
    environment:
      - DJANGO_ENV=development
      - DEBUG=True
      - ALLOWED_HOSTS=*
      - DJANGO_SECRET=local-secret-key
      - REDIS_URL=redis://redis-state:6379/0
      - WHATSAPP_API_URL=${WHATSAPP_API_URL}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      - WHATSAPP_BUSINESS_ID=${WHATSAPP_BUSINESS_ID}
      - MYCREDEX_APP_URL=https://dev.mycredex.dev
      - CLIENT_API_KEY=${CLIENT_API_KEY}
      - USE_PROGRESSIVE_FLOW=True
    command: ["./start_app.sh"]
    depends_on:
      redis-state:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 20s
    networks:
      - app-network

  redis-state:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 2
    networks:
      - app-network

  mock:
    build:
      context: ..
      target: development
    volumes:
      - ../mock:/app/mock
    ports:
      - "8001:8001"
    command: ["python3", "mock/server.py"]
    depends_on:
      - app
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
